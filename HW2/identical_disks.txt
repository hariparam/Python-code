def solve_identical_disks(length, n):
  array=[0]*length
  for i in range(n):
    array[i]=1
  index=n-1
  frontierqueue=[]
  arrayqueue=[]
  solution=[]
  while (not is_solved(array,n)):
    arraylist=[]
    moves=[]
    [arraylist,moves]=next_moves(array, solution)
    for m in range(len(moves)):
      arrayqueue.append(arraylist[m])
      frontierqueue.append(moves[m])
    array=arrayqueue[0]
    solution=frontierqueue[0]
    arrayqueue=arrayqueue[1:]
    frontierqueue=frontierqueue[1:]
  return solution
  
def is_solved(array, n):
  for i in range(len(array)):
    if i<n:
      if (array[len(array)-1-i]!=1):
        return False
    else:
      if (array[len(array)-1-i]!=0):
        return False
  return True  
  
def next_moves(array, moved):
  arraylist=[]
  moves_list=[]
  for i in range(len(array)):
    if i+1<len(array):
      if array[i]!=0 and array[i+1]==0:
        arraylist.append(array[:])
        moves_list.append(moved[:])
        temp=arraylist[-1][i]
        arraylist[-1][i]=arraylist[-1][i+1]
        arraylist[-1][i+1]=temp
        moves_list[-1].append(tuple((i,i+1)))
    if i+2<len(array):
      if array[i]!=0 and array[i+1]!=0 and array[i+2]==0:
        arraylist.append(array[:])
        moves_list.append(moved[:])
        temp=arraylist[-1][i]
        arraylist[-1][i]=arraylist[-1][i+2]
        arraylist[-1][i+2]=temp
        moves_list[-1].append(tuple((i,i+2)))
  return arraylist,moves_list